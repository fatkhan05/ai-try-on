---
description: 
globs: 
alwaysApply: false
---
# Panduan Penulisan Kode

## Dokumentasi Function
Setiap fungsi harus memiliki dokumentasi JSDoc yang menjelaskan:
```javascript
/**
 * Deskripsi singkat tentang apa yang dilakukan fungsi
 * @param {TipeParameter} namaParameter - Deskripsi parameter
 * @returns {TipeReturn} Deskripsi nilai yang dikembalikan
 * @example
 * // Contoh penggunaan fungsi
 * const hasil = namaFungsi(parameter);
 */
function namaFungsi(parameter) {
  // Implementasi fungsi
}
```

## Penamaan
- Gunakan **camelCase** untuk penamaan fungsi dan variabel
- Gunakan **PascalCase** untuk penamaan komponen React
- Gunakan **UPPER_SNAKE_CASE** untuk konstanta
- Nama harus deskriptif dan menjelaskan tujuan/fungsinya

```javascript
// ✅ Benar
const getUserData = () => { ... }
const UserProfile = () => { ... }
const MAX_RETRY_COUNT = 3;

// ❌ Salah
const data = () => { ... }
const profile = () => { ... }
const x = 3;
```

## Struktur Komponen
- Satu komponen per file
- Import dikelompokkan dan diurutkan:
  1. Import React dan Next.js
  2. Import komponen pihak ketiga
  3. Import komponen lokal
  4. Import styles/CSS

```javascript
// ✅ Benar
import { useState, useEffect } from 'react';
import Image from 'next/image';

import { Button } from '@/components/ui';
import { useAuth } from '@/hooks/useAuth';

import styles from './Component.module.css';
```

## Clean Code Practices
1. **Single Responsibility**: Setiap fungsi dan komponen harus memiliki satu tanggung jawab
```javascript
// ✅ Benar
const formatPrice = (price) => `Rp ${price.toLocaleString()}`;
const calculateTotal = (items) => items.reduce((sum, item) => sum + item.price, 0);

// ❌ Salah
const handlePrice = (price, items) => {
  const total = items.reduce((sum, item) => sum + item.price, 0);
  return `Rp ${total.toLocaleString()}`;
}
```

2. **DRY (Don't Repeat Yourself)**: Hindari duplikasi kode
```javascript
// ✅ Benar
const validateInput = (value, type) => {
  const validators = {
    email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    phone: /^[0-9]{10,12}$/
  };
  return validators[type].test(value);
}

// ❌ Salah
const validateEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
const validatePhone = (phone) => /^[0-9]{10,12}$/.test(phone);
```

3. **Error Handling**: Selalu sertakan penanganan error
```javascript
async function fetchData() {
  try {
    const response = await api.get('/data');
    return response.data;
  } catch (error) {
    console.error('Error fetching data:', error.message);
    throw new Error('Gagal mengambil data');
  }
}
```

## State Management
- Gunakan hooks dengan nama yang jelas
- Pisahkan logic bisnis dari komponen UI
```javascript
// ✅ Benar
function useProductData(productId) {
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Implementasi fetch data
  }, [productId]);

  return { product, loading, error };
}
```

## Testing
- Setiap komponen dan fungsi utama harus memiliki unit test
- Berikan deskripsi test yang jelas
```javascript
describe('ProductCard', () => {
  it('menampilkan harga produk dengan format yang benar', () => {
    // Implementasi test
  });

  it('menampilkan pesan error saat gambar gagal dimuat', () => {
    // Implementasi test
  });
});
```

Ikuti panduan ini untuk menjaga konsistensi dan kualitas kode di seluruh proyek.
